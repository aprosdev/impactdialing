target_abandonment = externally-defined target abandonment rate
start_time = number of seconds ago to start simulating; for now, 600
simulator_length = number of seconds to simulate; for now 3,600
increment = the number of times to loop for each parameter; for now, 10

caller_status = [ an array of length equal to the number of callers on the system with all values “available” ]
# at first, it looks like this [ “available”, “available”, … ]

observed_conversations = [ an array of arrays of the lengths of conversations that occurred after start_time, the lengths of their wrapup times, and a counter set to 0 ]
# example: observed_conversations = [ [ 45, 5, 0 ], [ 5, 3, 0 ], [ 63, 7, 0 ], ... ]

observed_dials = [ an of array of arrays of all the lengths of the dials that occurred after start_time, a counter set to 0, and their status ]
# example: observed_dials = [ [ 9, 0, answered ], [ 15, 0, unanswered ], [ 12, 0, answered ] … ]


mean_conversation = the mean of the observed conversations
longest_conversation = the longest observed conversation

longest_wrapup = the longest observed wrapup time

answer_ratio = number of elements in observed_dials / number of elements in observed_dials with status "answered"


dials_needed = 1
expected_conversation = longest_conversation
expected_wrapup = longest_wrapup


best_dials = 1
best_conversation = longest_conversation
best_wrapup = longest_wrapup
best_utilization = 0


i = 0
j = 0

while i < 3
# run the loop 3 times, for dials, conversations, and wrapups

while j < increment

  idle_time = 0

  active_time = 0

  active_dials = [ ]

  finished_dials = [ ]

  active_conversations = [ ]

  finished_conversations = [ ]

  t = 0

  while t <= simulator_length

    for each element in active_conversations

      if its counter = the call length + the wrapup time

        change status of 1 caller to available

        move that element to finished_conversations

        reset its counter to 0

      else

        increment its counter by 1

      end

    end

    for each element in active_dials

      if its counter = the dial length

        if its outcome is “answered”

          if a caller is available

            change the status of that caller to unavailable

            copy one element from observed_conversations to active_conversations

          else

            increment abandon_count

          end

        end

        move that element to finished_dials

        reset its counter to 0

      else

        increment its elapsed time by 1

      end

    end

    # simulated dialer

    active_wrapups = [ for every active_conversation with a counter > its conversation length, put an element in this array = the counter - the conversation length ]

    available_callers = number of elements in caller_status array “available” + number of elements in active_conversations with counters > expected_conversation + number of elements in active_wrapups > expected_wrapup - number of elements in active_conversations with counters > than longest_conversation

    ringing_lines = number of elements in active_dials

    dials_to_make = ( dials_needed * available_callers ) - ringing_lines

    copy dials_to_make elements from observed_dials to active_dials

    increment idle_time by the number of available callers

    increment active_time by the number of unavailable callers

    increment the counters of all elements in finished_dials

    increment the counters of all elements in finished_conversations

    increment t

  end

  simulated_abandonment = abandon_count / number of elements in finished_calls with status “answered”

  if simulated_abandonment <= target_abandonment

    utilization = active_time / ( active_time + idle_time )

    if utilization > best_utilization

      best_dials = dials_needed

      best_conversation = expected_conversation

      best_wrapup = expected_wrapup

    end

  end

  if i = 0

    increment dials_needed by ( ( answer_ratio - 1 ) / increment )

  if i = 1

    increment expected_conversation by ( ( longest_conversation - mean_conversation ) / increment )

  if i = 2

    increment expected_wrapup by ( longest_wrapup / 10 )

  increment j

end

  dials_needed = best_dials

  expected_conversation = best_conversation

  increment i

end